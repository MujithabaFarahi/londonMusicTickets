/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package londonmusicaltickets;

import java.awt.BorderLayout;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

/**
 *
 * @author aamir
 */
public class LondonMusicalsMain extends JFrame {

    /**
     * Creates new form Musicals
     */
    private ArrayList<Musical> musicals;
    private DefaultListModel<String> listModel;

    public LondonMusicalsMain() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        viewMusicals = new javax.swing.JButton();
        schedule = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        bookTickets = new javax.swing.JButton();
        imageLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        musicalList = new javax.swing.JList<String>();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("London Musicals");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("theatreMainNew.jpg")));

        viewMusicals.setMnemonic('V');
        viewMusicals.setText("View Musicals");
        viewMusicals.setToolTipText("View Musicals");
        viewMusicals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMusicalsActionPerformed(evt);
            }
        });

        schedule.setMnemonic('S');
        schedule.setText("Schedule");
        schedule.setToolTipText("Schedule");
        schedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleActionPerformed(evt);
            }
        });

        exit.setMnemonic('x');
        exit.setText("Exit");
        exit.setToolTipText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        bookTickets.setMnemonic('B');
        bookTickets.setText("Book Tickets");
        bookTickets.setToolTipText("Book Tickets");
        bookTickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookTicketsActionPerformed(evt);
            }
        });

        imageLabel.setText("Select a Musical to see its poster");

        listModel = new DefaultListModel<>();
        musicalList = new JList<>(listModel);
        musicals = FileManager.loadMusicalsFromFile("musicals.csv");
        if (musicals == null || musicals.isEmpty()) {
            System.out.println("No musicals loaded from the CSV file.");
        }

        /*
        musicalList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        */
        musicalList.setModel(listModel);
        jScrollPane2.setViewportView(musicalList);

        searchField.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        searchField.setText("Search for a Musical..");
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });
        searchField.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (searchField.getText().equals("Search for a Musical..")) {
                    searchField.setText(""); // Clear the text field

                }
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (searchField.getText().isEmpty()) {
                    searchField.setText("Search for a Musical.."); // Reset the placeholder text

                }
            }
        });

        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchMusical(); // Call the search method
            }
        });
        searchButton.setMnemonic('e');
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(viewMusicals, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(schedule, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookTickets, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(searchField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addComponent(imageLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewMusicals)
                    .addComponent(exit)
                    .addComponent(bookTickets)
                    .addComponent(schedule))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(searchField)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void viewMusicalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMusicalsActionPerformed

        listModel.clear();

        // Loop through the musicals and add their details to the JList
        for (Musical musical : musicals) {
            listModel.addElement("Name: " + musical.getName());
            listModel.addElement("Description: " + musical.getDescription());
            listModel.addElement("Category: " + musical.getCategory());
            listModel.addElement("Runtime: " + musical.getRuntime() + " minutes");
            listModel.addElement("Venue: " + musical.getVenue());
            listModel.addElement("Age Rating: " + musical.getAge());
            listModel.addElement("-------------------------------------------------"); // Separator for clarity
        }

        // Listener to update the imageLabel when a musical is selected
        musicalList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && musicalList.getSelectedIndex() != -1) {
                int selectedIndex = musicalList.getSelectedIndex();
                int musicalIndex = selectedIndex / 7;
                if (musicalIndex >= 0 && musicalIndex < musicals.size()) {
                    Musical selectedMusical = musicals.get(musicalIndex);
                    ImageIcon icon = selectedMusical.getImage();
                    if (icon != null && icon.getIconWidth() > 0) {
                        // Resize the image to fit the label dimensions
                        Image scaledImage = icon.getImage().getScaledInstance(
                                imageLabel.getWidth(), imageLabel.getHeight(), Image.SCALE_SMOOTH
                        );
                        imageLabel.setIcon(new ImageIcon(scaledImage));
                        imageLabel.setText("");// Clear text if an image is displayed
                    } else {
                        imageLabel.setIcon(null);// Clear the icon if no image is available
                        imageLabel.setText("Image not available");//default text if no image is found
                    }
                }
            }
        });

    }//GEN-LAST:event_viewMusicalsActionPerformed

    private void scheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleActionPerformed
        // Clear the current list to begin with
        listModel.clear();
        // Loop through the musicals and add their schedule details to the JList
        for (Musical musical : musicals) {
            listModel.addElement("Musical: " + musical.getName());
            listModel.addElement("Show Times: " + String.join(", ", musical.getShowDates()));
            listModel.addElement("Start Date: " + musical.getStartDate());
            listModel.addElement("End Date: " + musical.getEndDate());
            listModel.addElement("Venue: " + musical.getVenue());
            listModel.addElement("-------------------------------------------------"); // Separator between musical schedule details for clarity
        }
        // Adding a Listener to update the imageLabel when a musical in the List is selected
        musicalList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && musicalList.getSelectedIndex() != -1) { // Ensures that the execution happens only when the user has finished selecting and has actually selected something.
                int selectedIndex = musicalList.getSelectedIndex(); // Retrieves the index of the currently selected item in musicalList.
                int musicalIndex = selectedIndex / 6; // Each musical schedule takes up 6 lines. This is to group each set of 6 lines into one item.
                if (musicalIndex >= 0 && musicalIndex < musicals.size()) { // Checks that the calculated musicalIndex is within the valid range of the musicals list to avoid errors if the index is out of bounds.
                    Musical selectedMusical = musicals.get(musicalIndex); // Retrieves the selected Musical object from the musicals list using the calculated musicalIndex.
                    ImageIcon icon = selectedMusical.getImage(); // Retrieves the image associated with the selected Musical object.
                    if (icon != null && icon.getIconWidth() > 0) { // This checks that an image actually exists and that the image has valid dimensions.
                        // Resize the image to fit the label dimensions
                        Image scaledImage = icon.getImage().getScaledInstance(
                                imageLabel.getWidth(), imageLabel.getHeight(), Image.SCALE_SMOOTH // Helps to resize the image to the labels dimensions and make it look better when resized.
                        );
                        imageLabel.setIcon(new ImageIcon(scaledImage));
                        imageLabel.setText(""); // Clear text if an image is displayed
                    } else {
                        imageLabel.setIcon(null); // Clear the icon if no image is available
                        imageLabel.setText("Image not available"); // Default text if no image is found
                    }
                }
            }
        });
    }//GEN-LAST:event_scheduleActionPerformed

    private void searchMusical() {
        String searchText = searchField.getText().toLowerCase(); // Get search text and convert to lowercase
        listModel.clear(); // Clear the current list model

        // Filter and add matching musicals
        for (Musical musical : musicals) {
            if (musical.getName().toLowerCase().contains(searchText)
                    || musical.getDescription().toLowerCase().contains(searchText)) {
                listModel.addElement("Name: " + musical.getName());
                listModel.addElement("Description: " + musical.getDescription());
                listModel.addElement("Category: " + musical.getCategory());
                listModel.addElement("Runtime: " + musical.getRuntime() + " minutes");
                listModel.addElement("Venue: " + musical.getVenue());
                listModel.addElement("Age Rating: " + musical.getAge());
                listModel.addElement("-------------------------------------------------"); // Separator for clarity
            }
        }
        
//          musicalList.addListSelectionListener(e -> {
//            if (!e.getValueIsAdjusting() && musicalList.getSelectedIndex() != -1) {
//                int selectedIndex = musicalList.getSelectedIndex();
//                int musicalIndex = selectedIndex / 7;
//                if (musicalIndex >= 0 && musicalIndex < musicals.size()) {
//                    Musical selectedMusical = musicals.get(musicalIndex);
//                    ImageIcon icon = selectedMusical.getImage();
//                    if (icon != null && icon.getIconWidth() > 0) {
//                        // Resize the image to fit the label dimensions
//                        Image scaledImage = icon.getImage().getScaledInstance(
//                                imageLabel.getWidth(), imageLabel.getHeight(), Image.SCALE_SMOOTH
//                        );
//                        imageLabel.setIcon(new ImageIcon(scaledImage));
//                        imageLabel.setText("");// Clear text if an image is displayed
//                    } else {
//                        imageLabel.setIcon(null);// Clear the icon if no image is available
//                        imageLabel.setText("Image not available");//default text if no image is found
//                    }
//                }
//            }
//        });

        // Show a message if no matches were found
        if (listModel.isEmpty()) {
            listModel.addElement("No musicals found for: " + searchText);
        }
    }

    private void bookTicketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookTicketsActionPerformed

        BookTickets bookingScreen = new BookTickets();
        bookingScreen.setMusicals(musicals);  // Pass the musicals data
        bookingScreen.setVisible(true);
    }//GEN-LAST:event_bookTicketsActionPerformed


    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed

        // show exit confirmation dialog
        JOptionPane.showMessageDialog(this, "See You Next Time!");
        dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchMusical();
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LondonMusicalsMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LondonMusicalsMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LondonMusicalsMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LondonMusicalsMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            //  public void run() {
            new LondonMusicalsMain().setVisible(true);
            //  }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bookTickets;
    private javax.swing.JButton exit;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> musicalList;
    private javax.swing.JButton schedule;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton viewMusicals;
    // End of variables declaration//GEN-END:variables
}
